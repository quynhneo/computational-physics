#include <iostream>
#include <random>
#include <math.h>
#include <iomanip>
#include <fstream>

using namespace std;
double jump( double v, double dv)//imposing boundary condition
{
    if (v+dv > 0 ) { v=v+dv;}
    else { v=0;   } 
    return v;
}
double change( double v, double dv)//calculate the change in potential
{   double temp;
    if ( v+dv > 0) { temp = dv;}
    else { temp = (-1.0)*v;}
    return temp;
}

int main(int argc, char* argv[])

{
    int N=200; double epsilon = 0.1; double T=0.5;
    double *u;
    u = new double[N];
    ofstream outfile,outfile2;
    outfile.open("p2.dat");

//random number : uniform 
    std::random_device rd;
    std::default_random_engine generator( rd());
    std::uniform_real_distribution<double> random(0.0,1.0);
    cout<< random(generator)<<endl;

//initialize the state
    for (int i=0; i<N;i++)
         { u[i] = 1.0; 
         }     
  double totalU=N*1.0; 
//the main loop
   for (int n=0;n<N*50000;n++)
    {   int i; //pick a random particle
        i = random(generator)*N/1 ;   //divide by integer to get integer 
        double deltaU ; double tempo=u[i];
        deltaU = random(generator)*2.0*epsilon - epsilon;
       cout<< n  <<endl;
   //monte carlo 
        if (deltaU<=0) { u[i]=jump(u[i],deltaU) ;}
            else {  if (random(generator)< exp(-1.0*deltaU/T)) { u[i]=jump(u[i],deltaU) ;}
                 }
        totalU = totalU + u[i]-tempo  ;
        outfile << n << " "<< totalU<<endl; cout <<"."<<endl;
    }


    delete [] u;
    return 0;
}

