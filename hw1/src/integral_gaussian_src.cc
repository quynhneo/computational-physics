#include <iostream>

#include <math.h>
#include <stdlib.h>
#include <fstream>

#include "../include/integral_gaussian_include.hh"

float epsilon_m = 0.0000001; //machine precision


namespace integral
{

using namespace std;

float integral_gaussian (float x, float a, float b) //integral range a,b and initial number of interval 
{
    double relative_err;
    float output;
    
    ofstream outfile;
    outfile.open("gaussian.dat");//name of output textfile
    
    static float x11[6] = {0.0000000000000000000000000,0.2695431559523449723315320,0.5190961292068118159257257,0.7301520055740493240934163,0.8870625997680952990751578,0.9782286581460569928039380};
    static float w11[6] = {0.2729250867779006307144835,0.2628045445102466621806889,0.2331937645919904799185237,0.1862902109277342514260976,0.1255803694649046246346943,0.0556685671161736664827537};       


        output=0;  //reset the variable                  
        
       
        float sum=0;//reset the sum
         
        for (int i =0; i < 6 ; i = i+1) // loop over N_j interval, i.e N_j+1 times
            {
              
                
                sum= sum+  w11[i] * static_cast<float>( exp(-x11[i]) ) ;
                
                
                output=sum;
              // cout <<"  ith accumulated output"<< output << endl;                                  
                
            }//for i loop end
        cout << "right value"<<(exp(1)-1 )/exp(1)<<endl;
        relative_err = fabs(  (  (exp(1)-1 )/exp(1)  - output)/ ((exp(1)-1 )/exp(1))      )  ;
              
        cout <<"number of interval: " << 5  <<" integral exp("<< x << ")dx:= " << output << " relative err:= "<< relative_err << endl;
        outfile << 5 <<" "<< relative_err <<endl ;//writing out to text file     
    
    static float x19[10] = {0.0000000000000000000000000,0.1603586456402253758680961,0.3165640999636298319901173,0.4645707413759609457172671,0.6005453046616810234696382,0.7209661773352293786170959,0.8227146565371428249789225,0.9031559036148179016426609,0.9602081521348300308527788,0.9924068438435844031890177};
    static float w19[10] = {0.1610544498487836959791636,0.1589688433939543476499564,0.1527660420658596667788554,0.1426067021736066117757461,0.1287539625393362276755158,0.1115666455473339947160239,0.0914900216224499994644621,0.0690445427376412265807083,0.0448142267656996003328382,0.0194617882297264770363120};
    
    
    output=0;  //reset the variable                  
        
       
         sum=0;//reset the sum
         
        for (int i =0; i < 10 ; i = i+1) // loop over N_j interval, i.e N_j+1 times
            {
              
                
                sum= sum+  w19[i] * static_cast<float>( exp(-x19[i]) ) ;
                
                
                output=sum;
              // cout <<"  ith accumulated output"<< output << endl;                                  
                
            }//for i loop end
        cout << "right value"<<(exp(1)-1 )/exp(1)<<endl;
        relative_err = fabs(  (  (exp(1)-1 )/exp(1)  - output)/ ((exp(1)-1 )/exp(1))      )  ;
              
        cout <<"number of interval: " << 9  <<" integral exp("<< x << ")dx:= " << output << " relative err:= "<< relative_err << endl;
        outfile << 9 <<" "<< relative_err <<endl ;//writing out to text file     


static double x32[16] = {0.0483076656877383162348126,0.1444719615827964934851864,0.2392873622521370745446032,0.3318686022821276497799168,0.4213512761306353453641194,0.5068999089322293900237475,0.5877157572407623290407455,0.6630442669302152009751152,0.7321821187402896803874267,0.7944837959679424069630973,0.8493676137325699701336930,0.8963211557660521239653072,0.9349060759377396891709191,0.9647622555875064307738119,0.9856115115452683354001750,0.9972638618494815635449811};
static double w32[16] = {0.0965400885147278005667648,0.0956387200792748594190820,0.0938443990808045656391802,0.0911738786957638847128686,0.0876520930044038111427715,0.0833119242269467552221991,0.0781938957870703064717409,0.0723457941088485062253994,0.0658222227763618468376501,0.0586840934785355471452836,0.0509980592623761761961632,0.0428358980222266806568786,0.0342738629130214331026877,0.0253920653092620594557526,0.0162743947309056706051706,0.0070186100094700966004071};



output=0;  //reset the variable                  
        
       
         sum=0;//reset the sum
         
        for (int i =0; i < 16 ; i = i+1) // loop over N_j interval, i.e N_j+1 times
            {
              
                
                sum= sum+  w32[i] * static_cast<float>( exp(-x32[i]) ) ;
                
                
                output=sum;
              // cout <<"  ith accumulated output"<< output << endl;                                  
                
            }//for i loop end
        cout << "right value"<<(exp(1)-1 )/exp(1)<<endl;
        relative_err = fabs(  (  (exp(1)-1 )/exp(1)  - output)/ ((exp(1)-1 )/exp(1))      )  ;
              
        cout <<"number of interval: " << 15  <<" integral exp("<< x << ")dx:= " << output << " relative err:= "<< relative_err << endl;
        outfile << 15 <<" "<< relative_err <<endl ;//writing out to text file     

static float x64[32] = {0.0243502926634244325089558,0.0729931217877990394495429,0.1214628192961205544703765,0.1696444204239928180373136,0.2174236437400070841496487,0.2646871622087674163739642,0.3113228719902109561575127,0.3572201583376681159504426,0.4022701579639916036957668,0.4463660172534640879849477,0.4894031457070529574785263,0.5312794640198945456580139,0.5718956462026340342838781,0.6111553551723932502488530,0.6489654712546573398577612,0.6852363130542332425635584,0.7198818501716108268489402,0.7528199072605318966118638,0.7839723589433414076102205,0.8132653151227975597419233,0.8406292962525803627516915,0.8659993981540928197607834,0.8893154459951141058534040,0.9105221370785028057563807,0.9295691721319395758214902,0.9464113748584028160624815,0.9610087996520537189186141,0.9733268277899109637418535,0.9833362538846259569312993,0.9910133714767443207393824,0.9963401167719552793469245,0.9993050417357721394569056};
static float w64[32] = {};

output=0;  //reset the variable                  
        
       
         sum=0;//reset the sum
         
        for (int i =0; i < 32 ; i = i+1) // loop over N_j interval, i.e N_j+1 times
            {
              
                
                sum= sum+  w64[i] * static_cast<float>( exp(-x64[i]) ) ;
                
                
                output=sum;
              // cout <<"  ith accumulated output"<< output << endl;                                  
                
            }//for i loop end
        cout << "right value"<<(exp(1)-1 )/exp(1)<<endl;
        relative_err = fabs(  (  (exp(1)-1 )/exp(1)  - output)/ ((exp(1)-1 )/exp(1))      )  ;
              
        cout <<"number of interval: " << 31  <<" integral exp("<< x << ")dx:= " << output << " relative err:= "<< relative_err << endl;
        outfile << 31 <<" "<< relative_err <<endl ;//writing out to text file  


static float x128[64] = {};
static float w128[64] = {};

output=0;  //reset the variable                  
        
       
         sum=0;//reset the sum
         
        for (int i =0; i < 64 ; i = i+1) // loop over N_j interval, i.e N_j+1 times
            {
              
                
                sum= sum+  w128[i] * static_cast<float>( exp(-x128[i]) ) ;
                
                
                output=sum;
              // cout <<"  ith accumulated output"<< output << endl;                                  
                
            }//for i loop end
        cout << "right value"<<(exp(1)-1 )/exp(1)<<endl;
        relative_err = fabs(  (  (exp(1)-1 )/exp(1)  - output)/ ((exp(1)-1 )/exp(1))      )  ;
              
        cout <<"number of interval: " << 63  <<" integral exp("<< x << ")dx:= " << output << " relative err:= "<< relative_err << endl;
        outfile << 63 <<" "<< relative_err <<endl ;//writing out to text file  



}//integral


}//namespace
